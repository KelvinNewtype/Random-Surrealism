// Enhanced art generation with more surreal elements
class SurrealistArtGenerator {
  constructor(canvas) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d');
    this.phrases = [
      "Dreams melt like cosmic butter",
      "Time is a dancing elephant",
      "Memories float in digital tea",
      "The moon whispers in binary",
      "Reality glitches in purple",
      "Consciousness spills into fractals"
    ];
    this.initializeEffects();
  }

  initializeEffects() {
    this.gradients = [];
    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96C93D'];
    for (let i = 0; i < 5; i++) {
      const gradient = this.ctx.createLinearGradient(
        Math.random() * this.canvas.width,
        Math.random() * this.canvas.height,
        Math.random() * this.canvas.width,
        Math.random() * this.canvas.height
      );
      gradient.addColorStop(0, colors[Math.floor(Math.random() * colors.length)]);
      gradient.addColorStop(1, colors[Math.floor(Math.random() * colors.length)]);
      this.gradients.push(gradient);
    }
  }

  randomColor(alpha = 1) {
    return `hsla(${Math.random() * 360}, ${50 + Math.random() * 50}%, ${50 + Math.random() * 50}%, ${alpha})`;
  }

  drawSurrealistElement() {
    const x = Math.random() * this.canvas.width;
    const y = Math.random() * this.canvas.height;
    
    // Create more complex shapes
    this.ctx.beginPath();
    this.ctx.moveTo(x, y);
    
    // Generate random bezier curves
    for (let i = 0; i < 5; i++) {
      const cp1x = x + (Math.random() - 0.5) * 200;
      const cp1y = y + (Math.random() - 0.5) * 200;
      const cp2x = x + (Math.random() - 0.5) * 200;
      const cp2y = y + (Math.random() - 0.5) * 200;
      const endx = x + (Math.random() - 0.5) * 200;
      const endy = y + (Math.random() - 0.5) * 200;
      
      this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, endx, endy);
    }
    
    this.ctx.closePath();
    this.ctx.fillStyle = this.gradients[Math.floor(Math.random() * this.gradients.length)];
    this.ctx.fill();
    this.ctx.strokeStyle = this.randomColor(0.8);
    this.ctx.lineWidth = 2;
    this.ctx.stroke();
  }

  addTextureLayer() {
    const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
    const data = imageData.data;
    
    for (let i = 0; i < data.length; i += 4) {
      const noise = Math.random() * 30 - 15;
      data[i] = Math.min(255, Math.max(0, data[i] + noise));
      data[i + 1] = Math.min(255, Math.max(0, data[i + 1] + noise));
      data[i + 2] = Math.min(255, Math.max(0, data[i + 2] + noise));
    }
    
    this.ctx.putImageData(imageData, 0, 0);
  }

  generate() {
    // Clear canvas with a gradient background
    const bgGradient = this.ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height);
    bgGradient.addColorStop(0, this.randomColor(0.9));
    bgGradient.addColorStop(1, this.randomColor(0.9));
    this.ctx.fillStyle = bgGradient;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    // Generate multiple surrealist elements
    for (let i = 0; i < 15; i++) {
      this.drawSurrealistElement();
    }

    // Add surreal text
    this.ctx.font = '30px Space Grotesk';
    this.ctx.fillStyle = this.randomColor(0.8);
    this.ctx.textAlign = 'center';
    const phrase = this.phrases[Math.floor(Math.random() * this.phrases.length)];
    this.ctx.fillText(phrase, this.canvas.width / 2, this.canvas.height / 2);

    // Add texture
    this.addTextureLayer();
  }
}

// Initialize the generator
const canvas = document.getElementById('artCanvas');
const generator = new SurrealistArtGenerator(canvas);
const generateBtn = document.getElementById('generate-btn');
const downloadBtn = document.getElementById('download-btn');

// Event listeners
generateBtn.addEventListener('click', () => generator.generate());

downloadBtn.addEventListener('click', () => {
  const link = document.createElement('a');
  link.download = 'surrealist-art.png';
  link.href = canvas.toDataURL();
  link.click();
});

// Generate initial artwork
generator.generate();
